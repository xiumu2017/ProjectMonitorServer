<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.paradise.core.mapper.FinanceAlipayRecordMapper">
  <resultMap id="BaseResultMap" type="com.paradise.core.model.FinanceAlipayRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_sn" jdbcType="VARCHAR" property="orderSn" />
    <result column="out_trade_no" jdbcType="VARCHAR" property="outTradeNo" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="tx_target" jdbcType="VARCHAR" property="txTarget" />
    <result column="product_name" jdbcType="VARCHAR" property="productName" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="direction" jdbcType="VARCHAR" property="direction" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="service_fee" jdbcType="VARCHAR" property="serviceFee" />
    <result column="refund_amount" jdbcType="DECIMAL" property="refundAmount" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="money_status" jdbcType="VARCHAR" property="moneyStatus" />
    <result column="account" jdbcType="VARCHAR" property="account" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, order_sn, out_trade_no, create_time, pay_time, update_time, `source`, `type`, 
    tx_target, product_name, amount, direction, `status`, service_fee, refund_amount, 
    remark, money_status, account
  </sql>
  <select id="selectByExample" parameterType="com.paradise.core.example.FinanceAlipayRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from finance_alipay_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from finance_alipay_record
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from finance_alipay_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from finance_alipay_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from finance_alipay_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.paradise.core.example.FinanceAlipayRecordExample">
    delete from finance_alipay_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.paradise.core.model.FinanceAlipayRecord">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into finance_alipay_record (order_sn, out_trade_no, create_time, 
      pay_time, update_time, `source`, 
      `type`, tx_target, product_name, 
      amount, direction, `status`, 
      service_fee, refund_amount, remark, 
      money_status, account)
    values (#{orderSn,jdbcType=VARCHAR}, #{outTradeNo,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{payTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{source,jdbcType=VARCHAR}, 
      #{type,jdbcType=VARCHAR}, #{txTarget,jdbcType=VARCHAR}, #{productName,jdbcType=VARCHAR}, 
      #{amount,jdbcType=DECIMAL}, #{direction,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{serviceFee,jdbcType=VARCHAR}, #{refundAmount,jdbcType=DECIMAL}, #{remark,jdbcType=VARCHAR}, 
      #{moneyStatus,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    <selectKey keyProperty="record.id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into finance_alipay_record
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.orderSn != null">
            order_sn,
          </if>
          <if test="record.outTradeNo != null">
            out_trade_no,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.payTime != null">
            pay_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.source != null">
            `source`,
          </if>
          <if test="record.type != null">
            `type`,
          </if>
          <if test="record.txTarget != null">
            tx_target,
          </if>
          <if test="record.productName != null">
            product_name,
          </if>
          <if test="record.amount != null">
            amount,
          </if>
          <if test="record.direction != null">
            direction,
          </if>
          <if test="record.status != null">
            `status`,
          </if>
          <if test="record.serviceFee != null">
            service_fee,
          </if>
          <if test="record.refundAmount != null">
            refund_amount,
          </if>
          <if test="record.remark != null">
            remark,
          </if>
          <if test="record.moneyStatus != null">
            money_status,
          </if>
          <if test="record.account != null">
            account,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.orderSn != null">
            #{record.orderSn,jdbcType=VARCHAR},
          </if>
          <if test="record.outTradeNo != null">
            #{record.outTradeNo,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.payTime != null">
            #{record.payTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.source != null">
            #{record.source,jdbcType=VARCHAR},
          </if>
          <if test="record.type != null">
            #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.txTarget != null">
            #{record.txTarget,jdbcType=VARCHAR},
          </if>
          <if test="record.productName != null">
            #{record.productName,jdbcType=VARCHAR},
          </if>
          <if test="record.amount != null">
            #{record.amount,jdbcType=DECIMAL},
          </if>
          <if test="record.direction != null">
            #{record.direction,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=VARCHAR},
          </if>
          <if test="record.serviceFee != null">
            #{record.serviceFee,jdbcType=VARCHAR},
          </if>
          <if test="record.refundAmount != null">
            #{record.refundAmount,jdbcType=DECIMAL},
          </if>
          <if test="record.remark != null">
            #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.moneyStatus != null">
            #{record.moneyStatus,jdbcType=VARCHAR},
          </if>
          <if test="record.account != null">
            #{record.account,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.paradise.core.example.FinanceAlipayRecordExample" resultType="java.lang.Long">
    select count(*) from finance_alipay_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update finance_alipay_record
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.orderSn != null">
            order_sn = #{record.orderSn,jdbcType=VARCHAR},
          </if>
          <if test="record.outTradeNo != null">
            out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.payTime != null">
            pay_time = #{record.payTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.source != null">
            `source` = #{record.source,jdbcType=VARCHAR},
          </if>
          <if test="record.type != null">
            `type` = #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.txTarget != null">
            tx_target = #{record.txTarget,jdbcType=VARCHAR},
          </if>
          <if test="record.productName != null">
            product_name = #{record.productName,jdbcType=VARCHAR},
          </if>
          <if test="record.amount != null">
            amount = #{record.amount,jdbcType=DECIMAL},
          </if>
          <if test="record.direction != null">
            direction = #{record.direction,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            `status` = #{record.status,jdbcType=VARCHAR},
          </if>
          <if test="record.serviceFee != null">
            service_fee = #{record.serviceFee,jdbcType=VARCHAR},
          </if>
          <if test="record.refundAmount != null">
            refund_amount = #{record.refundAmount,jdbcType=DECIMAL},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.moneyStatus != null">
            money_status = #{record.moneyStatus,jdbcType=VARCHAR},
          </if>
          <if test="record.account != null">
            account = #{record.account,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update finance_alipay_record
    set id = #{record.id,jdbcType=INTEGER},
      order_sn = #{record.orderSn,jdbcType=VARCHAR},
      out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      `source` = #{record.source,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR},
      tx_target = #{record.txTarget,jdbcType=VARCHAR},
      product_name = #{record.productName,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DECIMAL},
      direction = #{record.direction,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=VARCHAR},
      service_fee = #{record.serviceFee,jdbcType=VARCHAR},
      refund_amount = #{record.refundAmount,jdbcType=DECIMAL},
      remark = #{record.remark,jdbcType=VARCHAR},
      money_status = #{record.moneyStatus,jdbcType=VARCHAR},
      account = #{record.account,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update finance_alipay_record
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.orderSn != null">
            order_sn = #{record.orderSn,jdbcType=VARCHAR},
          </if>
          <if test="record.outTradeNo != null">
            out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.payTime != null">
            pay_time = #{record.payTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.source != null">
            `source` = #{record.source,jdbcType=VARCHAR},
          </if>
          <if test="record.type != null">
            `type` = #{record.type,jdbcType=VARCHAR},
          </if>
          <if test="record.txTarget != null">
            tx_target = #{record.txTarget,jdbcType=VARCHAR},
          </if>
          <if test="record.productName != null">
            product_name = #{record.productName,jdbcType=VARCHAR},
          </if>
          <if test="record.amount != null">
            amount = #{record.amount,jdbcType=DECIMAL},
          </if>
          <if test="record.direction != null">
            direction = #{record.direction,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            `status` = #{record.status,jdbcType=VARCHAR},
          </if>
          <if test="record.serviceFee != null">
            service_fee = #{record.serviceFee,jdbcType=VARCHAR},
          </if>
          <if test="record.refundAmount != null">
            refund_amount = #{record.refundAmount,jdbcType=DECIMAL},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.moneyStatus != null">
            money_status = #{record.moneyStatus,jdbcType=VARCHAR},
          </if>
          <if test="record.account != null">
            account = #{record.account,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.paradise.core.model.FinanceAlipayRecord">
    update finance_alipay_record
    set order_sn = #{orderSn,jdbcType=VARCHAR},
      out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      `source` = #{source,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      tx_target = #{txTarget,jdbcType=VARCHAR},
      product_name = #{productName,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      direction = #{direction,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=VARCHAR},
      service_fee = #{serviceFee,jdbcType=VARCHAR},
      refund_amount = #{refundAmount,jdbcType=DECIMAL},
      remark = #{remark,jdbcType=VARCHAR},
      money_status = #{moneyStatus,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.paradise.core.example.FinanceAlipayRecordExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from finance_alipay_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from finance_alipay_record
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into finance_alipay_record
    (order_sn, out_trade_no, create_time, pay_time, update_time, `source`, `type`, tx_target, 
      product_name, amount, direction, `status`, service_fee, refund_amount, remark, 
      money_status, account)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.orderSn,jdbcType=VARCHAR}, #{item.outTradeNo,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.payTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, #{item.source,jdbcType=VARCHAR}, 
        #{item.type,jdbcType=VARCHAR}, #{item.txTarget,jdbcType=VARCHAR}, #{item.productName,jdbcType=VARCHAR}, 
        #{item.amount,jdbcType=DECIMAL}, #{item.direction,jdbcType=VARCHAR}, #{item.status,jdbcType=VARCHAR}, 
        #{item.serviceFee,jdbcType=VARCHAR}, #{item.refundAmount,jdbcType=DECIMAL}, #{item.remark,jdbcType=VARCHAR}, 
        #{item.moneyStatus,jdbcType=VARCHAR}, #{item.account,jdbcType=VARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" keyColumn="id" keyProperty="list.id" parameterType="map" useGeneratedKeys="true">
    insert into finance_alipay_record (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'order_sn'.toString() == column.value">
          #{item.orderSn,jdbcType=VARCHAR}
        </if>
        <if test="'out_trade_no'.toString() == column.value">
          #{item.outTradeNo,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'pay_time'.toString() == column.value">
          #{item.payTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'source'.toString() == column.value">
          #{item.source,jdbcType=VARCHAR}
        </if>
        <if test="'type'.toString() == column.value">
          #{item.type,jdbcType=VARCHAR}
        </if>
        <if test="'tx_target'.toString() == column.value">
          #{item.txTarget,jdbcType=VARCHAR}
        </if>
        <if test="'product_name'.toString() == column.value">
          #{item.productName,jdbcType=VARCHAR}
        </if>
        <if test="'amount'.toString() == column.value">
          #{item.amount,jdbcType=DECIMAL}
        </if>
        <if test="'direction'.toString() == column.value">
          #{item.direction,jdbcType=VARCHAR}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=VARCHAR}
        </if>
        <if test="'service_fee'.toString() == column.value">
          #{item.serviceFee,jdbcType=VARCHAR}
        </if>
        <if test="'refund_amount'.toString() == column.value">
          #{item.refundAmount,jdbcType=DECIMAL}
        </if>
        <if test="'remark'.toString() == column.value">
          #{item.remark,jdbcType=VARCHAR}
        </if>
        <if test="'money_status'.toString() == column.value">
          #{item.moneyStatus,jdbcType=VARCHAR}
        </if>
        <if test="'account'.toString() == column.value">
          #{item.account,jdbcType=VARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>